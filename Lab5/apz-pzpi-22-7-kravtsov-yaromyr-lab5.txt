Міністерство освіти і науки України 
Харківський національний університет радіоелектроніки 
Кафедра програмної інженерії 














Звіт з лабораторної роботи № 5
 з дисципліни «Архітектура програмного забезпечення»










Перевірив                                                            Виконав 
ст. викладач ПІ                                                          ст. групи ПЗПІ-22-7 
Сокорчук Ігор Петрович                                     Кравцов Я.П.




























Харків 2025




1 Аналіз завдання 




№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	06.05.2025
	1.0
	Створення роботи
	



2 ЗАВДАННЯ


Необхідно розгорнути програмний застосунок.
Проаналізуйте завдання.
Виконайте контрольні завдання.
Відкрийте створений на попередній лабораторній роботі репозиторій GitHub.
Створіть у репозиторії директорію Task5 та текстовий файл з описом інженерних рішень у цій частині проєкту, як вказано у додатку З
Зафіксуйте кожну внесену зміну командою git commit з відповідним коментарем та фіксуйте цією командою усі наступні зміни у проєкті.
Створіть у директорії Task5 піддиректорію для програмного коду, як вказано у додатку З
Створіть програмний код, завантажте його у створену піддиректорію, зафіксуйте внесені у репозиторій зміни
Виконайте функціональне тестування створеного програмного коду та створіть відеозапис цього тестування тривалістю 7..10 хвилин з усними поясненнями процесу тестування
Завантажте створений відеозапис тестування YouTube канал для вашого облікового запису в домені @nure.ua
Створіть для завантаженого запису його хронологічний опис.
Оформіть звіт у форматі pdf та завантажте його на навчальну платформу https://dl.nure.ua/
У коментарях до завантаженого звіту вкажіть посилання на відеозапис тестування у вашому каналі YouTube.








3 ОПИС ВИКОНАНОЇ РОБОТИ




1. Серверна частина
Написана на TypeScript + NestJS. Дані зберігаються у MySQL 8; доступ здійснюється через sequelize-typescript; міграції керуються засобом sequelize-cli. Docker + docker-compose піднімають три контейнери: api, mysql, mysql-backup (образ fradelg/mysql-cron-backup виконує щоденні дампи й кладе їх у volume db_backups).Nginx працює як reverse-proxy та термінує HTTPS (сертифікати Let’s Encrypt). Весь код зберігається у репозиторії Git «apz-pzpi-22-7-kravtsov-yaromyr»; гілка main містить готові docker-файли.


2. Інструкція з розгортання back-end
Клонувати репозиторій git і перейти в директорію server. Скопіювати файл .env.example у .env та заповнити параметри (паролі БД, хости, JWT-ключі). Виконати команду docker compose up -d; після старту API слухає порт 5001, Swagger доступний на /api. Додати у /etc/nginx/sites-enabled конфігурацію, що проксіює трафік на 127.0.0.1:5001. Резервні копії шукаються у volume apz_backend_db_backups (шлях можна дізнатися через docker volume inspect).


3. Веб-клієнт
Реалізований на React 18 + Vite + TypeScript; інтерфейс побудований на Material UI v5. Axios-інтерцептор підставляє Bearer-токен; рефреш-логіка підтримує оновлення Access-токена. Деплой виконується на Cloudflare Pages, що автоматично збирає production-версію та публікує її за CDN-доменом.


4. Мобільний клієнт
Стек: Expo + React Native + TypeScript; глобальний стан – zustand. Авторизація: POST /users/login, JWT зберігається у AsyncStorage; Axios готує заголовок Authorization. Екрани:
- Login – форма входу.
- Zones – GET /zones/{userId}/users, список карток зон.
- ZoneDoors – GET /doors/zone/{zoneId}, перелік дверей; натискання «Open» виконує POST /doors/{deviceId}/open?user_id={userId}. Навігація: createNativeStackNavigator + createBottomTabNavigator; у режимі логіну таб-бар прихований. Додаток протестовано на iOS-емуляторі, Android Studio AVD та фізичному пристрої через Expo Go.


5. Підсумок
Програмна система повністю контейнеризована, розгортається за кілька хвилин на будь-якому сервері з підтримкою Docker. Веб-та мобільна клієнтські частини взаємодіють з єдиним REST-API, що забезпечує авторизацію, управління зонами та дистанційне відкривання дверей.


Підсумок
Програмна система повністю контейнеризована, розгортається за кілька хвилин на будь-якому сервері з підтримкою Docker. Веб-та мобільна клієнтські частини взаємодіють з єдиним REST-API, що забезпечує авторизацію, управління зонами та дистанційне відкривання дверей.




________________






ДОДАТОК A


Відеозапис доповіді на YouTube: https://youtu.be/KaXXRN-YJ98
Хронологічний опис відеозапису:
00:00 - Вступ 
00:30 - Додавання забудівля 
01:00 - Видача користувачу доступ до зон та будівель
01:10 - Тестування зон спільного користування
02:20 - Тестування доступу до зон
04:20 - Тестування роботи відкривання дверей 










________________
Додаток Б
Графічні матеріали


  

Рисунок Б.1 - UML діаграма прецедентів


  

Рисунок Б.2 - Діаграма компонентів


  

Рисунок Б.3 - Діаграма взаємодії


  

Рисунок Б.4 - Діаграма станів