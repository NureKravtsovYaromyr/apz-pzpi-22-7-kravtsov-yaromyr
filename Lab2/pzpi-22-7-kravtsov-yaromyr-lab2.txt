Міністерство освіти і науки України 
Харківський національний університет радіоелектроніки 
Кафедра програмної інженерії 







Звіт з лабораторної роботи № 2
 з дисципліни «Архітектура програмного забезпечення»





Перевірив 	  						 Виконав 
ст. викладач ПІ                               		           ст. групи ПЗПІ-22-7 
Сокорчук Ігор Петрович  			           Кравцов Я.П.















Харків 2025


1 ІСТОРІЯ ЗМІН 


№
Дата
Версія звіту
Опис змін та виправлень
1
06.05.2025
1.0
Створення роботи



2 ЗАВДАННЯ

Розробити архітектуру та реалізувати серверну частину програмної системи з урахуванням ролей користувачів, бізнес-логіки та обробки запитів через REST API. Забезпечити тестування ключових маршрутів та відлагодити взаємодію з базою даних.


3 ОПИС ВИКОНАНОЇ РОБОТИ

1. Загальний опис системи
У рамках лабораторної роботи було розроблено серверну частину програмної системи для керування доступом до зон спільного користування в межах житлового комплексу. Система орієнтована на два основні типи користувачів — девелоперів (адміністраторів житлових об’єктів) та мешканців (резидентів), і дозволяє:
створювати будівлі та зони,
керувати доступом до дверей за допомогою IoT-ідентифікаторів,
відстежувати події входу/виходу,
аналізувати навантаження на простори спільного користування.
Архітектура реалізована на базі NestJS + Sequelize (ORM), з документованим API через Swagger. Додатково впроваджено механізми авторизації через JWT, ролі доступу та аналітичні маршрути для зручного керування просторами.

2. Реалізована логіка та маршрути API
2.1. Аутентифікація та ролі
На початку було реалізовано логіку входу в систему (POST /users/login), після чого користувач отримує токен доступу. У Swagger-документації передбачено авторизацію через Bearer Token, що дозволяє тестувати маршрути згідно з роллю (developer або resident).

2.2. Управління користувачами
Реалізовано можливість створення користувачів (мешканців або девелоперів), перегляду всіх профілів, оновлення та отримання історії дій кожного користувача.
POST /users/res — створення мешканця
GET /users/:id/activity — історія входів
GET /users/:id/zones — зони, які відвідував користувач


2.3. Структура об’єктів: будівлі, зони, двері
Система дозволяє девелоперам створювати житлові будівлі, додавати до них зони спільного користування (наприклад, спортзал, конференц-зал) та прикріплювати до зон фізичні двері з унікальним deviceId. Через ці двері фіксується кожен вхід/вихід користувачів.
Будівлі (/buildings)
GET /buildings — перегляд усіх будівель девелопера
POST /buildings — створення нової будівлі
GET /buildings/:id/users — список мешканців будівлі
Зони (/zones)
POST /zones — створення зони
GET /zones/building/:buildingId — всі зони у будівлі
GET /zones/:id/users — користувачі, які заходили до зони

Двері (/doors)
POST /doors — створення дверей у зоні
POST /doors/:deviceId/open — фіксація події входу
GET /doors/:id/logs — історія відкриттів

2.4. Логи доступу (/door-logs)
Кожен захід через двері реєструється у таблиці door_logs. Реалізовано маршрути для перегляду логів загалом або за фільтрами:
GET /door-logs — перегляд за фільтрами (userId, doorId, zoneId)
GET /door-logs/:id — перегляд конкретного запису

3. Аналітика та математична логіка
3.1. Загальна статистика по зонах
Було реалізовано маршрути для збору статистичних даних:
GET /zones/:id/usage — кількість входів у зону
GET /zones/:id/activity — детальна історія активності

3.2. Виявлення "мертвих зон"
На основі математичного підрахунку кількості входів по зонах за останні 30 днів реалізовано аналітичний маршрут:
GET /zones/inactive — повертає зони з найменшим завантаженням
Цей аналіз дозволяє девелоперу зрозуміти, які приміщення майже не використовуються та потребують змін у розкладі або промоції.

4. Технічна архітектура
Backend: NestJS (REST API), JWT, Guards, Roles
ORM: Sequelize + PostgreSQL
Swagger: повна документація для кожного ендпоінта
IoT-зв’язок: симуляція через deviceId дверей
Бізнес-логіка: чітко поділена між користувачами, зонами, аналітикою

5. Висновок
У результаті виконаної роботи реалізовано повноцінну архітектуру серверної частини програмної системи для цифрового управління доступом у житловому комплексі.
Кожен ключовий елемент протестовано через Swagger UI, включно з маршрутом авторизації, створення структури будівлі, реєстрацією подій відкриття дверей та отриманням статистичних звітів.
Система готова до масштабування та впровадження IoT-рішень у реальному середовищі.





ДОДАТОК A

Відеозапис доповіді на YouTube: https://youtu.be/30pZAfTCTRI
Хронологічний опис відеозапису:
00:00 – Вступ. Короткий опис цілей проєкту та призначення системи для контролю доступу до зон спільного користування.
00:20 – Авторизація як девелопер. Вхід у систему через POST /users/login та додавання токена у Swagger для подальшого тестування.
00:50 – Створення мешканця. Додавання нового користувача-резидента до системи через POST /users/res.
01:40 – Робота з маршрутами будівель. Тестування CRUD-операцій для будівель: створення, перегляд, пошук, оновлення, додавання користувачів.
03:00 – Робота з маршрутами зон спільного користування. Створення зон у межах будівлі, перегляд зон, зв’язок зон із будівлями.
03:40 – Робота з маршрутами дверей. Створення дверей, прив’язка до зон, перегляд усіх дверей девелопера, тестування подій відкриття.
05:40 – Перевірка статистичних маршрутів. Використання GET /zones/:id/usage, GET /zones/:id/activity, GET /zones/:id/users для аналітики використання зон.
07:15 – Аналіз навантаження та "мертвих зон". Тестування GET /zones/inactive — виявлення зон з найменшою активністю за останній період.
08:00 – Висновок. Підсумок демонстрації: ключові можливості, користь для девелопера та гнучкість у масштабуванні.

