1 ОПИС АРХІТЕКТУРИ СИСТЕМИ
Система є багатокомпонентною платформою, призначеною для керування доступом до зон спільного користування в житлових комплексах. Основними її компонентами є клієнтські додатки (веб-інтерфейс, мобільні додатки), серверна частина на базі NestJS, база даних PostgreSQL, а також IoT-пристрої для контролю доступу через двері. Система підтримує ролі користувачів (девелопер та мешканець) і забезпечує авторизацію через JWT. Аналітичні можливості дозволяють виявляти "мертві зони", аналізувати активність користувачів та оптимізувати використання ресурсів житлового комплексу.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ
Діаграма розгортання демонструє фізичну організацію системи, яка включає клієнтські пристрої (комп’ютери та мобільні телефони мешканців та девелоперів), Backend-сервер (NestJS), сервер бази даних PostgreSQL та IoT-пристрої (дверні замки). Взаємодія між компонентами реалізується за допомогою REST API, яке обробляє запити клієнтів, взаємодіє з базою даних для збереження та отримання даних, а також з IoT-пристроями для фіксації подій відкриття дверей і моніторингу доступу в реальному часі.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ
Серверна частина побудована за принципами модульної архітектури на основі фреймворка NestJS, використовуючи патерни MVC і Dependency Injection. Вона включає окремі модулі: AuthModule для автентифікації, UserModule для управління користувачами, BuildingModule, ZoneModule, DoorModule, DoorLogModule та TokenModule для відповідних CRUD-операцій та бізнес-логіки. Використовується Sequelize ORM для роботи з базою даних PostgreSQL. Додатково реалізовані гварди та ролі для захисту маршрутів, логування подій та повна документація API через Swagger UI.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ
Діаграма прецедентів показує взаємодію двох основних акторів (девелопер та мешканець) із системою. Девелопер має можливість створювати та керувати об’єктами: будівлями, зонами, дверима, додавати мешканців і переглядати статистику активності. Мешканець може авторизуватись, відкривати двері через IoT-пристрої та переглядати свою історію доступу. Ця діаграма чітко ілюструє функціональні можливості, доступні для кожного типу користувачів.

5 ПОБУДОВА ER-ДІАГРАМИ
ER-діаграма моделює базу даних, що складається з основних сутностей: User, Building, Zone, Door і DoorLog. Користувачі мають зв’язки з будівлями через сутність BuildingUser, будівлі містять зони, зони містять двері, а події відкриття дверей фіксуються в таблиці DoorLog. Це забезпечує повну прозорість даних, логічну структурованість і можливість ефективно виконувати складні запити для аналітики та звітності.

6 СПЕЦИФІКАЦІЯ REST
Система використовує RESTful архітектуру з чітко описаними маршрутами для взаємодії. Всього реалізовано понад 50 маршрутів для авторизації, CRUD-операцій над користувачами, будівлями, зонами, дверима та логами, а також аналітичних запитів. Основні маршрути описані з детальними параметрами запитів, очікуваними відповідями та HTTP-статусами. Повна документація доступна у Swagger, що дозволяє швидко тестувати всі функції.

7 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ
Діаграма компонентів системи демонструє модульну організацію серверної частини. Вона містить компоненти: AuthModule, UserModule, BuildingModule, ZoneModule, DoorModule, DoorLogModule, TokenModule та LoggerModule. Кожен модуль має чітко визначену відповідальність і зв'язок з іншими компонентами через Dependency Injection. Це забезпечує гнучкість системи, зручність підтримки і масштабування.

ВИСНОВКИ
У результаті виконаної роботи розроблена повноцінна програмна архітектура системи керування доступом до зон спільного користування в житлових комплексах. Реалізовано серверну частину з повною REST API-документацією, функціоналом авторизації та ролями, інтеграцією з базою даних і IoT-пристроями. Система забезпечує ефективне адміністрування, моніторинг та аналітику використання зон, має можливість легко масштабуватись і доповнюватись новими функціональними модулями.

ДОДАТОК А
Специфікація REST

| Метод  | Маршрут                         | Опис                                            |
| ------ | -------------------------------- | ----------------------------------------------- |
| GET    | `/buildings`                   | Отримати всі будівлі поточного девелопера       |
| POST   | `/buildings`                   | Створити нову будівлю                           |
| GET    | `/buildings/search`            | Пошук будівель за назвою або адресою             |
| GET    | `/buildings/{id}`              | Отримати будівлю за ID (з мешканцями та зонами) |
| PUT    | `/buildings/{id}`              | Оновити інформацію про будівлю за ID            |
| DELETE | `/buildings/{id}`              | Видалити будівлю за ID                          |
| POST   | `/buildings/{id}/users`        | Додати мешканця до будівлі                      |
| GET    | `/buildings/{id}/users`        | Отримати всіх мешканців конкретної будівлі      |

---

### Зони спільного користування (Zones)

| Метод  | Маршрут                               | Опис                                           |
| ------ | -------------------------------------- | ---------------------------------------------- |
| GET    | `/zones`                              | Отримати всі зони поточного девелопера         |
| POST   | `/zones`                              | Створити нову зону                             |
| GET    | `/zones/one/{id}`                     | Отримати конкретну зону за ID                  |
| GET    | `/zones/building/{buildingId}`        | Отримати всі зони конкретної будівлі           |
| PUT    | `/zones/{id}`                         | Оновити інформацію зони за ID                  |
| DELETE | `/zones/{id}`                         | Видалити зону за ID                            |
| GET    | `/zones/{id}/usage`                   | Отримати статистику використання зони          |
| GET    | `/zones/{id}/activity`                | Отримати історію відкриттів дверей у зоні      |
| GET    | `/zones/{id}/users`                   | Отримати користувачів, які заходили в зону     |
| GET    | `/zones/inactive`                     | Отримати зони з низьким рівнем активності      |

---

### Двері (Doors)

| Метод  | Маршрут                         | Опис                                                  |
| ------ | -------------------------------- | ----------------------------------------------------- |
| GET    | `/doors`                       | Отримати всі двері поточного девелопера               |
| POST   | `/doors`                       | Створити нові двері                                    |
| GET    | `/doors/{id}`                  | Отримати двері за ID                                   |
| PUT    | `/doors/{id}`                  | Оновити інформацію про двері за ID                     |
| DELETE | `/doors/{id}`                  | Видалити двері за ID                                   |
| GET    | `/doors/zone/{zoneId}`         | Отримати двері для конкретної зони                     |
| GET    | `/doors/device/{deviceId}`     | Отримати двері за унікальним ID IoT-пристрою           |
| POST   | `/doors/{deviceId}/open`       | Зафіксувати подію відкриття дверей через IoT-пристрій |
| GET    | `/doors/{id}/logs`             | Отримати історію відкриттів конкретних дверей          |

---

### Логи доступу (Door-Logs)

| Метод  | Маршрут                    | Опис                                           |
| ------ | --------------------------- | ---------------------------------------------- |
| GET    | `/door-logs`               | Отримати всі записи логів (з можливістю фільтрації) |
| GET    | `/door-logs/{id}`          | Отримати один запис логу за ID                 |
| DELETE | `/door-logs/{id}`          | Видалити конкретний запис логу за ID           |

---

### Токени (Token)

| Метод | Маршрут             | Опис                                 |
| ----- | -------------------- | ------------------------------------ |
| GET   | `/token/refresh`    | Оновити (отримати новий) токен доступу |

---

### Користувачі (Users)

| Метод  | Маршрут                          | Опис                                             |
| ------ | --------------------------------- | ------------------------------------------------ |
| GET    | `/users`                         | Отримати всіх користувачів                       |
| POST   | `/users`                         | Створити нового користувача (девелопер або мешканець) |
| GET    | `/users/{id}`                    | Отримати інформацію про користувача за ID        |
| PUT    | `/users/{id}`                    | Оновити інформацію користувача за ID             |
| DELETE | `/users/{id}`                    | Видалити користувача за ID                       |
| GET    | `/users/profile`                 | Отримати профіль поточного користувача з токену   |
| GET    | `/users/{id}/activity`           | Отримати історію відкриттів дверей користувача    |
| GET    | `/users/{id}/zones`              | Отримати список зон, відвіданих користувачем      |
| POST   | `/users/login`                   | Авторизація (логін) користувача                    |
